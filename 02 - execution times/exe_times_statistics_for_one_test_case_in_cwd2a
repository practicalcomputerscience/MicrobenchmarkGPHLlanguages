#!/bin/bash
#
# exe_times_statistics_for_one_test_case_in_cwd2a (755)
#
# 2025-06-03
#
# this script is using wall clock time with '%e'. For example:
#   $ /usr/bin/time -f '%e' java -jar random_streams_for_perf_stats.jar
#
#
# run on Ubuntu 24 LTS like this for example:
# $ ./exe_times_statistics_for_one_test_case_in_cwd2a java -jar random_streams_for_perf_stats.jar
#                                                     $1   $2   $3
#
# for the time command see: https://www.man7.org/linux/man-pages/man1/time.1.html (*)
#
# to-do:
#   - translate into PowerShell script for floating point arithmetic??
#
#

ROUNDS=20  # n rounds for one test case

CMD="/usr/bin/time -f '%e' "$1" "$2" "$3

echo $CMD
echo "$ROUNDS rounds this test case will do now..."


SUM=0  # milliseconds


for i in $(seq 1 $ROUNDS); do

    read WALL_CLOCK < <({ $CMD 1>&3; } 3>&2 2>&1)
    # outout of time command goes to stderr (*)
    # redirect stdout/1 to a file descriptor 3; then redirect file descriptor 3 to stderr/2 and stderr/2 to stdout/1 into variable WALL_CLOCK
    # echo "  WALL_CLOCK = $WALL_CLOCK [seconds]"  # WALL_CLOCK = '0.12' --> there's no floating-point arithmetic in bash

    # get rid of ' chars:
    read WALL_CLOCK2 < <({ echo $WALL_CLOCK | tr --delete "\'"; })
    # echo "  WALL_CLOCK2 = $WALL_CLOCK2"  # WALL_CLOCK2 = 0.12

    # get rid of decimal dot:
    read WALL_CLOCK3 < <({ echo $WALL_CLOCK2 | tr --delete "\."; })
    # echo "  WALL_CLOCK3 = $WALL_CLOCK3"  # WALL_CLOCK3 = 012

    # convert string to integer number:
    WALL_CLOCK4=$((10#$WALL_CLOCK3))
    # echo "  WALL_CLOCK4 = $WALL_CLOCK4"  # WALL_CLOCK4 = 12

    WALL_CLOCK5=$(($WALL_CLOCK4 * 10))  # unit of WALL_CLOCK4 is milliseconds
    # echo "  WALL_CLOCK5 = $WALL_CLOCK5"  # WALL_CLOCK5 = 120

    SUM=$(($SUM+$WALL_CLOCK5))

done

echo "======================="
echo "SUM = $SUM [milliseconds]"

MEAN=$(($SUM/$ROUNDS))
echo "mean = $MEAN [milliseconds]"

# end of exe_times_statistics_for_one_test_case_in_cwd2a
