# random_bitstring_and_flexible_password_generator.inko
#
# 2025-05-17/18/19, 2025-06-01
# 2025-07-19: fixing error handling when writing to files
# 2025-07-20
#
# make on Ubuntu 24 LTS: $ inko build random_bitstring_and_flexible_password_generator.inko
#
# run on Ubuntu 24 LTS:  $ ./build/random_bitstring_and_flexible_password_generator
#
#
# to-do:
#   - Decimal_str_to_pos_integer: better quality control? <-- 0 for a bad number quality is OK for now
#
#
# correctly install LLVM 17, including the essential Polly LLVM framework (libpolly-17-dev):
#   $ sudo apt-get install --yes rustc cargo git build-essential llvm-17 llvm-17-dev libstdc++-11-dev libclang-common-17-dev zlib1g-dev libpolly-17-dev libzstd-dev
#   $ cargo install ivm --force  # installing the installation manager ivm first: https://docs.inko-lang.org/manual/latest/setup/ivm/
#   $ ivm install latest  # now installing the Inko compiler
#   $ inko --version
#   inko 0.18.1
#   $


import std.stdio (Stdout, Stdin)
import std.string (StringBuffer)
import std.rand (Random)
import std.fs.file (ReadWriteFile)
import std.utf8  # for code points, codepoints


let STR_LENGTH_BIN = 16
let STR_LENGTH_HEX = 4


#######################################################
#
# user defined functions,
# or module methods like they are called in Inko in this context;
# here defined at the top-level scope:

fn Integer_to_bin_string (n: Int) -> String {  # N not possible here --> choose n
  let mut bin_str_arr = Array.filled(with: '0', times: STR_LENGTH_BIN)
  let mut bin_str_ret = StringBuffer.new

  let mut j: Int = STR_LENGTH_BIN - 1
  let mut k: Int = n

  while k > 0 and j >= 0 {
    if k % 2 == 0 {
      bin_str_arr.set(j, '0')
    } else {
      bin_str_arr.set(j, '1')
    }
    k /= 2  # no remainder here
    j -= 1
  }

  j = STR_LENGTH_BIN - 1  # reverse char order and write to StringBuffer
  while j >= 0 {
    k = STR_LENGTH_BIN - j - 1
    bin_str_ret.push(bin_str_arr.get(k))
    j -= 1
  }

  return bin_str_ret.to_string
}


fn Integer_to_hex_string (n: Int) -> String {
  let mut hex_str_arr = Array.filled(with: '0', times: STR_LENGTH_HEX)
  let mut hex_str_ret = StringBuffer.new

  let mut j: Int = STR_LENGTH_HEX - 1
  let mut k: Int = n

  let mut remainder = 0

  while k > 0 and j >= 0 {
    remainder = k % 16
    match remainder {
      case 0  -> hex_str_arr.set(j, '0')
      case 1  -> hex_str_arr.set(j, '1')
      case 2  -> hex_str_arr.set(j, '2')
      case 3  -> hex_str_arr.set(j, '3')
      case 4  -> hex_str_arr.set(j, '4')
      case 5  -> hex_str_arr.set(j, '5')
      case 6  -> hex_str_arr.set(j, '6')
      case 7  -> hex_str_arr.set(j, '7')
      case 8  -> hex_str_arr.set(j, '8')
      case 9  -> hex_str_arr.set(j, '9')
      case 10 -> hex_str_arr.set(j, 'a')
      case 11 -> hex_str_arr.set(j, 'b')
      case 12 -> hex_str_arr.set(j, 'c')
      case 13 -> hex_str_arr.set(j, 'd')
      case 14 -> hex_str_arr.set(j, 'e')
      case 15 -> hex_str_arr.set(j, 'f')
      case _ -> nil
    }
    k /= 16  # no remainder here
    j -= 1
  }

  j = STR_LENGTH_HEX - 1  # reverse char order and write to StringBuffer
  while j >= 0 {
    k = STR_LENGTH_HEX - j - 1
    hex_str_ret.push(hex_str_arr.get(k))
    j -= 1
  }

  return hex_str_ret.to_string
}


fn Decimal_str_to_pos_integer (inp_str: String) -> Int {
  let mut out_nbr: Int = 0  # result
  let mut power = 10

  let mut j: Int = 0

  let bytes_arr = inp_str.to_byte_array
  let mut pos = bytes_arr.size - 1

  let mut good_quality = true

  while j < bytes_arr.size {
    let digit = bytes_arr.get(pos)

    if digit >= 48 and digit <= 57 {
      out_nbr += (digit - 48) * (power ** j)  # 48 --> '0', .., 57 --> '9'
      # beware: Operators are left-associative. This means 5 + 10 * 2 evaluates to 30, not 25.
      # https://docs.inko-lang.org/manual/latest/references/syntax/

    } else {
      good_quality = false
    }

    pos -= 1
    j += 1
  }

  if good_quality == false {
     out_nbr = 0  # 0 for a bad number quality is OK for now
  }

  return out_nbr
}


fn Binary_str_to_unsigned_int (inp_str: String) -> Int {
# here no quality control like in  Decimal_str_to_pos_integer() for well defined input strings only:
  let mut out_nbr: Int = 0  # result
  let mut power = 2

  let mut j: Int = 0

  let bytes_arr = inp_str.to_byte_array
  let mut pos = bytes_arr.size - 1

  while j < bytes_arr.size {
    let digit = bytes_arr.get(pos)

    if digit >= 48 and digit <= 49 {
      out_nbr += (digit - 48) * (power ** j)  # 48 --> '0', 49 --> '1'
    }

    pos -= 1
    j += 1
  }

  return out_nbr

}

# end of user defined functions
#
#######################################################



type async Main {  # a lightweight process
  fn async main {  # an "async" instance method
    let upper_limit: Int = 62501   # 62501 for exactly 1M binary digits
    # let upper_limit: Int = 100  # for testing

    # let M1: Int = 1_000_000
    # let K250: Int = 250_000

    let m: Int = 65521  # = 2^16 - 15
    let a: Int = 17364
    let c: Int = 0

    let file_bits_x   = "random_bitstring.bin"
    let file_bits_hex = "random_bitstring.byte"

    let x = []
    let bits_x = StringBuffer.new
    # let mut bits_x_str = StringBuffer.new
    let bits_hex = StringBuffer.new  # needed for program ENT - A Pseudorandom Number Sequence Test Program

    # https://github.com/inko-lang/inko/blob/main/std/src/std/array.inko
    let rng = Random.new
    x.push(rng.int_between(min: 0, max: m - 1))

    let mut i: Int = 1
    let out = Stdout.new
    # let mut buf = StringBuffer.new

    out.print("\ngenerating a random bit stream...")
    while i < upper_limit {
      x.push((a*x.get(i - 1) + c) % m)  # no i-1 here!
      # out.print("")  # for testing -- this is a newline substitute
      # out.print(x.get(i).to_string)  # for testing

      # doing here like in Ada to convert a natural integer number into
      # a binary string of "0"'s and "1"'s of fixed length ("16 bits"):
      # out.print(Integer_to_bin_string(x.get(i)))  # for testing
      bits_x.push(Integer_to_bin_string(x.get(i)))

      # out.print(Integer_to_hex_string(x.get(i)))  # for testing

      bits_hex.push(Integer_to_hex_string(x.get(i)))

      i += 1
    }

    # write bit stream to disk:
    match ReadWriteFile.new(file_bits_x.to_path) {
      case Ok(_) -> {
        let mut file1 = ReadWriteFile.new(file_bits_x.to_path).get
        match file1.write_string(bits_x.to_string) {
          case Ok(_) -> out.print("Bit stream has been written to disk under name:  ${file_bits_x}")
          case Error(e) -> out.print("could not write to file: ${file_bits_x} -- ${e}")
        }
      }
      case Error(e) -> out.print("could not write to file: ${file_bits_x} -- ${e}")
    }

    # write byte stream to disk:
    match ReadWriteFile.new(file_bits_hex.to_path) {
      case Ok(_) -> {
        let mut file2 = ReadWriteFile.new(file_bits_hex.to_path).get
        match file2.write_string(bits_hex.to_string) {
          case Ok(_) -> out.print("Byte stream has been written to disk under name: ${file_bits_hex}")
          case Error(e) -> out.print("could not write to file: ${file_bits_hex} -- ${e}")
        }
      }
      case Error(e) -> out.print("could not write to file: ${file_bits_hex} -- ${e}")
    }


    # make a password of n_char printable chars: user input requested here
    let mut n_char = 12
    let mut answer = false

    let stdin = Stdin.new

    while answer == false {
      n_char = 12
      out.write_string("\nPassword of ${n_char} printable chars OK? 'y' or another integer number >= 8: ")
      # write_string() instead of print() to not print a final newline

      let bytes_arr = ByteArray.new
      # https://docs.inko-lang.org/std/main/module/std/bytes/ByteArray/
      # important: (re-)create a new instance of the ByteArray type inside this while-loop, not outside!

      stdin.read(bytes_arr, 10000)
      # this is a non-bulletproof workaround, because this solution isn't working here:
      # https://github.com/inko-lang/inko/issues/867
      #   import std.io (BufferedReader)
      #   ...
      #   let inp = BufferedReader.new(Stdin.new)
      #   let buf = ByteArray.new
      #   inp.exact = false  # the method 'exact=' isn't defined for type 'BufferedReader[Stdin]

      let answer_str = bytes_arr.to_string
      # out.write_string("--${answer_str}--\n")  # for testing

      # strip the last byte, that is the newline character, from answer_str:
      # https://github.com/inko-lang/inko/blob/main/std/src/std/string.inko
      let answer_str_stripped = answer_str.substring(0, bytes_arr.size - 1)
      # out.write_string("--${answer_str_stripped}--\n")  # for testing

      if answer_str_stripped == 'y' {
        answer = true
      } else {
        # Converting a String to an Integer: nothing inbuilt yet?
        # https://docs.inko-lang.org/std/v0.15.0/module/std/int/ToInt/
        n_char = Decimal_str_to_pos_integer(answer_str_stripped)
        # out.print("n_char = ${n_char}")  # for testing: returned value of n_char is 0 to indicate bad quality
        if n_char < 8 {
            out.write_string("enter an integer number >= 8 or 'y'\n")
        } else {
          answer = true
        }
      }
    }


    let mut with_special_chars = true
    answer = false

    while answer == false {
      out.write_string("\nDo you want me to use special characters like .;,+*... ? 'y' or 'n': ")

      let bytes_arr = ByteArray.new
      stdin.read(bytes_arr, 10000)  # see above
      let answer_str = bytes_arr.to_string
      let answer_str_stripped = answer_str.substring(0, bytes_arr.size - 1)
      if answer_str_stripped == 'y' {
        answer = true
      } else {
        with_special_chars = false
        answer = true
      }
    }


    # byte_unchecked():
    #   let @ptr: Pointer[UInt8]
    #   fn inline byte_unchecked(index: Int) -> Int {  # <-- non-public <=> fn pub inline ...
    #     (@ptr as Int + index as Pointer[UInt8]).0 as Int
    #   }
    # https://github.com/inko-lang/inko/blob/4e6a3a99157e348893aea9f8a05ad7059cdf54ef/std/src/std/string.inko#L629C13-L629C39


    let char_set = StringBuffer.new

    if with_special_chars {

      let mut i = 33
      while i < 127 {  # loop over the printable ASCII characters from '!' to '~', inclusive
        let byte_printable = ByteArray.new
        utf8.encode_scalar(i, byte_printable)  # code points, codepoints
        # https://github.com/inko-lang/inko/blob/4e6a3a99157e348893aea9f8a05ad7059cdf54ef/std/src/std/utf8.inko#L27

        char_set.push(byte_printable.to_string)
        i += 1
      }

    } else {
      char_set.push("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
    }
    # out.print("${char_set}")  # for testing


    i = 0                # char counter for the password
    let mut j: Int =  0  # char counter for x
    let mut pw_chars = StringBuffer.new

    let char_set_str = char_set.to_string

    while i < n_char {
      let bin0 = Integer_to_bin_string(x.get(j))
      # out.print("\n${bin0}")  # for testing

      let bin0_0 = bin0.substring(0, 8)
      let bin0_1 = bin0.substring(8, 16)
      # out.print("${bin0_0}  ${bin0_1}")  # for testing

      # call a user defined function to convert these two well defined binary strings into integer numbers:
      #   --> code points, codepoints
      let char0_nbr = Binary_str_to_unsigned_int(bin0_0)
      let char1_nbr = Binary_str_to_unsigned_int(bin0_1)
      # out.print("${char0_nbr}  ${char1_nbr}")  # for testing

      let char0 = ByteArray.new
      let char1 = ByteArray.new
      utf8.encode_scalar(char0_nbr, char0)
      utf8.encode_scalar(char1_nbr, char1)

      let char0_str = char0.to_string
      let char1_str = char1.to_string

      # https://github.com/inko-lang/inko/blob/4e6a3a99157e348893aea9f8a05ad7059cdf54ef/std/src/std/string.inko#L623C5-L623C38
      if char_set_str.contains?(char0_str) {
        pw_chars.push(char0_str)
        i += 1
      }

      if char_set_str.contains?(char1_str) and i < n_char {
        pw_chars.push(char1_str)
        i += 1
      }

      j += 1
    }

    out.print("\nYour password of ${n_char} characters is: ${pw_chars}")
  }
}

# end of random_bitstring_and_flexible_password_generator.inko
