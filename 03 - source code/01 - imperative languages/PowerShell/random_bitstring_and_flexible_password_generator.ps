<#
random_bitstring_and_flexible_password_generator.ps

2025-05-28/29, 2025-06-01/08/18

run on Ubuntu 24 LTS: $ chmod 755 random_bitstring_and_flexible_password_generator.ps
                      $ pwsh ./random_bitstring_and_flexible_password_generator.ps

#>


$END = 62501  # 62501 for exactly 1M binary digits
# $END  = 50  # for testing
# $M1   = $END * 16
# $K250 = $END * 4

$m = 65521  # = 2^16 - 15
$a = 17364
$c = 0

$file_bits_x   = "random_bitstring.bin"
$file_bits_hex = "random_bitstring.byte"


$x = [int]0..($END - 1)  # define an empty array

$x[0] = Get-Random -Maximum $m
# Write-Output "x[0] = $($x[0])"  # for testing; a formatted string

# needed for bit stream:
# $bits_x = [byte]0..($M1 - 1)
$bits_x = [System.Text.StringBuilder]::new()
# String concatenation performance boosting
# stringbuilder class method
# https://devdojo.com/hcritter/string-concatenation-performance-boosting

# needed for ENT - A Pseudorandom Number Sequence Test Program:
$bits_hex = [System.Text.StringBuilder]::new()


Write-Output "`ngenerating a random bit stream..."

$x_old = $x[0]
for ($i = 1; $i -lt $x.Count; $i++) {
  $x_new = ($a * $x_old + $c) % $m
  $x[$i] = $x_new
  # Write-Output "i = ${i}: x[i] = $x_new"  # for testing

  $bits_x_str = [Convert]::ToString($x_new, 2).PadLeft(16, '0')
  # Write-Output "bits_x_str = ${bits_x_str}"  # for testing
  [void]$bits_x.append($bits_x_str)  # non verbose output
  # https://stackoverflow.com/questions/7801651/powershell-and-stringbuilder

  $bits_hex_str = "{0:x4}" -f $($x[${i}])
  # Write-Output "bits_hex_str = ${bits_hex_str}"  # for testing
  [void]$bits_hex.append($bits_hex_str)

  $x_old = $x_new
}
# Write-Output "${bits_x}"    # for testing
# Write-Output "${bits_hex}"  # for testing


# write bit stream to disk: using a cmdlet
# error handling: https://learn.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-exceptions?view=powershell-7.5
try {
  Set-Content -Path $file_bits_x -Value $bits_x -NoNewline
  Write-Output "Bit stream has been written to disk under name:  ${file_bits_x}"
} catch {
  Write-Error "could not write to file: ${file_bits_x} ! -- ${PSItem}"
}

# write byte stream to disk
try {
  Set-Content -Path $file_bits_hex -Value $bits_hex -NoNewline
  Write-Output "Byte stream has been written to disk under name: ${file_bits_hex}"
} catch {
  Write-Error "could not write to file: ${file_bits_hex} ! -- ${PSItem}"
}



# make a password of N_CHAR printable chars:
$answer = $false
while (-Not $answer) {
  $N_CHAR = 12  # base case
  $answer_str = Read-Host "`nPassword of ${N_CHAR} printable chars OK? 'y' or another integer number >= 8"  # : coming automatically here

  if ($answer_str -eq "y") {
    $answer = $true
  } else {
    try {
      $N_CHAR = [int]$answer_str
      if ($N_CHAR -ge 8) {
        $answer = $true
      } else {
        Write-Output 'enter an integer number >= 8 or "y"'
      }
    } catch {
        Write-Output 'enter an integer number >= 8 or "y"'
    }
  }
}


$WITH_SPECIAL_CHARS = $true
$answer = $false
while (-Not $answer) {
   $answer_str = Read-Host "`nDo you want me to use special characters like .;,+*... ? 'y' or 'n'"
   if ($answer_str -eq "y") {
    $answer = $true
  } else {
    $WITH_SPECIAL_CHARS = $false
    $answer = $true
  }
}


# using the .net regex object:
if ($WITH_SPECIAL_CHARS -eq $true) {
  $char_set = "^[!-~]+$"
  # https://blog.ironmansoftware.com/daily-powershell/powershell-range-operator/
} else {
  $char_set = "^[a-zA-Z0-9]+$"
}
# Write-Output "char_set = ${char_set}"  # for testing


$i = 0  # char counter for the password
$j = 0  # char counter for x
$pw_chars = ""

while ($i -lt $N_CHAR) {
  $bin0 = [Convert]::ToString($x[$j], 2).PadLeft(16, '0')
  # Write-Output "`n${bin0}"

  $bin0_0 = $bin0.Substring(0,8)
  $bin0_1 = $bin0.Substring(8,8)
  # Write-Output "${bin0_0} -- ${bin0_1}" # for testing

  [int]$char0a = [convert]::ToInt32($bin0_0, 2)
  [int]$char0b = [convert]::ToInt32($bin0_1, 2)
  # https://stackoverflow.com/questions/25322636/powershell-convert-string-to-number
  # Write-Output "${char0a} -- ${char0b}" # for testing

  $char1a = [char]$char0a
  $char1b = [char]$char0b
  # Write-Output "${char1a} -- ${char1b}" # for testing

  if ($char1a -match $char_set) {
    $pw_chars += $char1a
    $i += 1
  }

  if ($char1b -match $char_set -And $i -lt $N_CHAR) {
    $pw_chars += $char1b
    $i += 1
  }

  $j += 1
}

Write-Output "`nYour password of ${N_CHAR} characters is: ${pw_chars}"

# end of random_bitstring_and_flexible_password_generator.ps
