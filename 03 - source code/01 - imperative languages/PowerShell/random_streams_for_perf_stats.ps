<#
random_streams_for_perf_stats.ps

2025-06-01/18

run on Ubuntu 24 LTS: $ chmod 755 random_streams_for_perf_stats.ps
                      $ pwsh ./random_streams_for_perf_stats.ps
                      $ ./exe_times_statistics_for_one_test_case_in_cwd2 pwsh random_streams_for_perf_stats.ps

#>


$END = 62501  # 62501 for exactly 1M binary digits
# $END  = 50  # for testing
# $M1   = $END * 16
# $K250 = $END * 4

$m = 65521  # = 2^16 - 15
$a = 17364
$c = 0

$file_bits_x   = "random_bitstring.bin"
$file_bits_hex = "random_bitstring.byte"


$x = [int]0..($END - 1)  # define an empty array

$x[0] = Get-Random -Maximum $m
# Write-Output "x[0] = $($x[0])"  # for testing; a formatted string

# needed for bit stream:
# $bits_x = [byte]0..($M1 - 1)
$bits_x = [System.Text.StringBuilder]::new()
# String concatenation performance boosting
# stringbuilder class method
# https://devdojo.com/hcritter/string-concatenation-performance-boosting

# needed for ENT - A Pseudorandom Number Sequence Test Program:
$bits_hex = [System.Text.StringBuilder]::new()


Write-Output "`ngenerating a random bit stream..."

$x_old = $x[0]
for ($i = 1; $i -lt $x.Count; $i++) {
  $x_new = ($a * $x_old + $c) % $m
  $x[$i] = $x_new
  # Write-Output "i = ${i}: x[i] = $x_new"  # for testing

  $bits_x_str = [Convert]::ToString($x_new, 2).PadLeft(16, '0')
  # Write-Output "bits_x_str = ${bits_x_str}"  # for testing
  [void]$bits_x.append($bits_x_str)  # non verbose output
  # https://stackoverflow.com/questions/7801651/powershell-and-stringbuilder

  $bits_hex_str = "{0:x4}" -f $($x[${i}])
  # Write-Output "bits_hex_str = ${bits_hex_str}"  # for testing
  [void]$bits_hex.append($bits_hex_str)

  $x_old = $x_new
}
# Write-Output "${bits_x}"    # for testing
# Write-Output "${bits_hex}"  # for testing


# write bit stream to disk: using a cmdlet
# error handling: https://learn.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-exceptions?view=powershell-7.5
try {
  Set-Content -Path $file_bits_x -Value $bits_x -NoNewline
  Write-Output "Bit stream has been written to disk under name:  ${file_bits_x}"
} catch {
  Write-Error "could not write to file: ${file_bits_x} ! -- ${PSItem}"
}

# write byte stream to disk
try {
  Set-Content -Path $file_bits_hex -Value $bits_hex -NoNewline
  Write-Output "Byte stream has been written to disk under name: ${file_bits_hex}"
} catch {
  Write-Error "could not write to file: ${file_bits_hex} ! -- ${PSItem}"
}

# end of random_streams_for_perf_stats.ps
